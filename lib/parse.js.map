{"version":3,"sources":["../src/parse.js"],"names":["ParsePhone","value","onlyNums","replace","length","slice","ParseInteger","parseFloat","ParseYear","substring","ParseIntegerOrHalf","decimalPosition","indexOf","FormatCurrency","toLocaleString","nFormatter","num","digits","si","symbol","rx","i","toFixed"],"mappings":"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","sourcesContent":["export const ParsePhone = value => {\n  if (!value) return value;\n  const onlyNums = value.replace(/[^\\d]/g, '');\n\n  if (onlyNums.length <= 3) return onlyNums;\n\n  if (onlyNums.length <= 7)\n    return `(${onlyNums.slice(0, 3)}) ${onlyNums.slice(3)}`;\n\n  return `(${onlyNums.slice(0, 3)}) ${onlyNums.slice(3, 6)}-${onlyNums.slice(\n    6,\n    10\n  )}`;\n};\n\nexport const ParseInteger = value => {\n  if (!value) return;\n\n  const onlyNums = value.replace(/[^\\d]/g, '');\n\n  if (!onlyNums) return;\n\n  return parseFloat(onlyNums);\n};\n\nexport const ParseYear = value => {\n  if (!value) return;\n\n  const onlyNums = value.replace(/[^\\d]/g, '');\n\n  if (!onlyNums) return;\n\n  return parseFloat(onlyNums.substring(0, 4));\n};\n\nexport const ParseIntegerOrHalf = value => {\n  if (!value) return;\n\n  const onlyNums = value.replace(/[^\\d.]/g, '');\n\n  if (!onlyNums) return;\n\n  const decimalPosition = onlyNums.indexOf('.');\n  if (decimalPosition > -1)\n    if (decimalPosition < onlyNums.length - 1)\n      return `${onlyNums.substring(0, decimalPosition)}.5`;\n\n  return onlyNums;\n};\n\nexport const FormatCurrency = value => {\n  if (!value && value !== 0) return '';\n\n  return value.toLocaleString();\n};\n\nexport const nFormatter = (num, digits) => {\n  var si = [\n    { value: 1, symbol: '' },\n    { value: 1e3, symbol: 'k' },\n    { value: 1e6, symbol: 'm' },\n    { value: 1e9, symbol: 'g' },\n    { value: 1e12, symbol: 't' },\n    { value: 1e15, symbol: 'p' },\n    { value: 1e18, symbol: 'e' }\n  ];\n  const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\n  let i;\n  for (i = si.length - 1; i > 0; i--) if (num >= si[i].value) break;\n\n  return (num / si[i].value).toFixed(digits).replace(rx, '$1') + si[i].symbol;\n};\n"],"file":"parse.js"}