{"version":3,"sources":["../../src/dropdown/index.js"],"names":["Dropdown","options","input","dropdownOpen","toggleDropdown","value","selectedValue","updateSelectedValue","optionKeys","Object","keys","onChange","map","key","propTypes","PropTypes","shape","name","arrayOf","string","isRequired","onBlur","func","onFocus"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;AAQA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,OAAwB;AAAA,MAArBC,OAAqB,QAArBA,OAAqB;AAAA,MAAZC,KAAY,QAAZA,KAAY;;AAAA,kBACA,qBAAS,KAAT,CADA;AAAA;AAAA,MAChCC,YADgC;AAAA,MAClBC,cADkB;;AAAA,mBAEM,qBAASF,KAAK,CAACG,KAAf,CAFN;AAAA;AAAA,MAEhCC,aAFgC;AAAA,MAEjBC,mBAFiB;;AAIvC,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAP,CAAYT,OAAZ,CAAnB;AAEA,wBAAU,YAAM;AACdC,IAAAA,KAAK,CAACS,QAAN,CAAeL,aAAf;AACD,GAFD;AAIA,SACE,gCAAC,wBAAD;AAAmB,IAAA,OAAO,EAAE;AAAA,aAAMF,cAAc,CAAC,CAACD,YAAF,CAApB;AAAA;AAA5B,KACE,gCAAC,qBAAD,QACGF,OAAO,CAACK,aAAD,CADV,EAEE,gCAAC,gBAAD;AAAW,IAAA,IAAI,EAAEH;AAAjB,IAFF,CADF,EAKE,gCAAC,cAAD;AAAS,IAAA,OAAO,EAAEA;AAAlB,KACGK,UAAU,CAACI,GAAX,CAAe,UAAAC,GAAG,EAAI;AACrB,WACE,gCAAC,aAAD;AACE,MAAA,OAAO,EAAE;AAAA,eAAMN,mBAAmB,CAACM,GAAD,CAAzB;AAAA,OADX;AAEE,MAAA,GAAG,EAAEA,GAFP;AAGE,MAAA,MAAM,EAAEA,GAAG,KAAKP;AAHlB,OAKGL,OAAO,CAACY,GAAD,CALV,CADF;AASD,GAVA,CADH,CALF,CADF;AAqBD,CA/BD;;AAiCAb,QAAQ,CAACc,SAAT,GAAqB;AACnBb,EAAAA,OAAO,EAAEc,sBAAUC,KAAV,CAAgB;AACvBC,IAAAA,IAAI,EAAEF,sBAAUG,OAAV,CAAkBH,sBAAUI,MAA5B;AADiB,GAAhB,EAENC,UAHgB;AAInBlB,EAAAA,KAAK,EAAEa,sBAAUC,KAAV,CAAgB;AACrBC,IAAAA,IAAI,EAAEF,sBAAUI,MADK;AAErBE,IAAAA,MAAM,EAAEN,sBAAUO,IAFG;AAGrBX,IAAAA,QAAQ,EAAEI,sBAAUO,IAHC;AAIrBC,IAAAA,OAAO,EAAER,sBAAUO,IAJE;AAKrBjB,IAAAA,KAAK,EAAEU,sBAAUI,MAAV,CAAiBC;AALH,GAAhB;AAJY,CAArB;eAaepB,Q","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DropdownContainer,\n  SelectedOption,\n  Options,\n  Option,\n  ArrowIcon\n} from './style';\n\nconst Dropdown = ({ options, input }) => {\n  const [dropdownOpen, toggleDropdown] = useState(false);\n  const [selectedValue, updateSelectedValue] = useState(input.value);\n\n  const optionKeys = Object.keys(options);\n\n  useEffect(() => {\n    input.onChange(selectedValue);\n  });\n\n  return (\n    <DropdownContainer onClick={() => toggleDropdown(!dropdownOpen)}>\n      <SelectedOption>\n        {options[selectedValue]}\n        <ArrowIcon open={dropdownOpen} />\n      </SelectedOption>\n      <Options visible={dropdownOpen}>\n        {optionKeys.map(key => {\n          return (\n            <Option\n              onClick={() => updateSelectedValue(key)}\n              key={key}\n              active={key === selectedValue}\n            >\n              {options[key]}\n            </Option>\n          );\n        })}\n      </Options>\n    </DropdownContainer>\n  );\n};\n\nDropdown.propTypes = {\n  options: PropTypes.shape({\n    name: PropTypes.arrayOf(PropTypes.string)\n  }).isRequired,\n  input: PropTypes.shape({\n    name: PropTypes.string,\n    onBlur: PropTypes.func,\n    onChange: PropTypes.func,\n    onFocus: PropTypes.func,\n    value: PropTypes.string.isRequired\n  })\n};\n\nexport default Dropdown;\n"],"file":"index.js"}